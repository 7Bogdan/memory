{"version":3,"sources":["playBoard/board/Square.js","playBoard/board/Info.js","playBoard/infoGame/infoForBoard.js","playBoard/board/Board.js","App.js","index.js"],"names":["Square","props","className","onClick","click","change","index","id","flipped","style","color","Info","propsColors","colors","colorsInfo","arr","map","found","push","Array","from","Set","infoColor","length","steps","refresh","key","infoSquares","infoSquare","interimArr","i","RandomColor","backgroundColor","Math","random","toString","substring","toUpperCase","j","floor","shuffle","Board","useState","infoForSquares","setInfoForSquares","firstSquare","setFirstSquare","secondSquare","setSecondSquare","setSteps","setClick","changeSquare","makeStep","flipper","rememberSquare","square","useEffect","setTimeout","compareColor","foundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a57e2e45.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = (props) => {\n  return (\n    <div className={\"memory-square\"} >\n      <div className={\"front-square\"}\n      onClick={() => (props.click ? props.change(props.index, props.id) : null)} />\n      <div\n        className={props.flipped ? \"back-square\" : \"back-square.flip\"}\n        style={props.color}\n      />\n    </div>\n  );\n};\nexport default Square;\n","import React from \"react\";\r\n\r\nconst Info = (props) => {\r\n  let propsColors = props.colors;\r\n\r\n  let infoColor = () => {\r\n    let arr = [];\r\n    propsColors.map((color) =>\r\n      color.found === false ? arr.push(color.color) : null\r\n    );\r\n    return Array.from(new Set(arr));\r\n  };\r\n\r\n  let colorsInfo = infoColor();\r\n\r\n  let restOfColor = () => {\r\n    return (\r\n      <ol>\r\n        <li className=\"info\">Steps done: {props.steps} </li>\r\n        <li className=\"info\">You need to find colors:</li>\r\n        {colorsInfo.map((color, index) => (\r\n          <li key={index} className=\"needColor\" style={color} />\r\n        ))}\r\n      </ol>\r\n    );\r\n  };\r\n\r\n  let endGame = () => {\r\n    return (\r\n      <div className=\"winner\">\r\n        You won in {props.steps} steps. <br />\r\n        Will you play again? <br />\r\n        <button className=\"game-refresh\" onClick={props.refresh}>\r\n          Refresh\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let listColors = () => {\r\n    if (colorsInfo.length === 0) {\r\n      return endGame();\r\n    } else {\r\n      return restOfColor();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-info\">\r\n      {listColors()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","let infoSquares = ()=> {\r\nlet infoSquare = []\r\nlet interimArr = []\r\n\r\nfor (let i = 0; i < 8; i++) {\r\n  let color = RandomColor();\r\n  let id = i;\r\n  interimArr.push({color, id}, {color, id});\r\n}\r\n\r\nfor (let i = 0; i < 16; i++) {\r\n  let id = interimArr[i].id;\r\n  let color = interimArr[i].color;\r\n  let index = i;\r\n  let flipped = false;\r\n  let found = false;\r\n  infoSquare.push({color, id, index, flipped,found});\r\n}\r\n\r\nfunction RandomColor() {\r\n  let backgroundColor =\r\n    '#' + (Math.random().toString(16) + '000000').substring(2, 8).toUpperCase();\r\n  return {backgroundColor};\r\n}\r\n\r\nfunction shuffle(arr) {\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n}\r\nshuffle(infoSquare)\r\nreturn infoSquare ;\r\n}\r\nexport default infoSquares;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Square from \"./Square.js\";\r\nimport Info from \"./Info.js\";\r\nimport infoSquares from \"../infoGame/infoForBoard.js\";\r\n\r\nfunction Board() {\r\n  let [infoForSquares, setInfoForSquares] = useState(infoSquares);\r\n  let [firstSquare, setFirstSquare] = useState(\"firstSquare\");\r\n  let [secondSquare, setSecondSquare] = useState(\"secondSquare\");\r\n  let [steps, setSteps] = useState(0);\r\n  let [click, setClick] = useState(true);\r\n\r\n  let changeSquare = (index, id) => {\r\n    makeStep();\r\n    flipper(index);\r\n    rememberSquare(index, id);\r\n  };\r\n\r\n  let makeStep = () => {\r\n    setSteps(steps + 1);\r\n  };\r\n\r\n  let flipper = (index) => {\r\n    let interimArr = infoForSquares;\r\n    interimArr.map((square) =>\r\n      square.index === index ? (square.flipped = !square.flipped) : null\r\n    );\r\n    setInfoForSquares(interimArr);\r\n  };\r\n\r\n  let rememberSquare = (index, id) => {\r\n        firstSquare === \"firstSquare\"\r\n        ? setFirstSquare({ index, id })\r\n        : setSecondSquare({ index, id });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (steps % 2 === 0) {\r\n      setClick(false);\r\n      setTimeout(compareColor, 1000);\r\n    }\r\n  }, [steps]);\r\n\r\n  let compareColor = () => {\r\n    if (firstSquare.id === secondSquare.id) {\r\n      setClick(true);\r\n      foundColor(firstSquare.id)\r\n      setFirstSquare(\"firstSquare\");\r\n      setSecondSquare(\"secondSquare\");\r\n    } else {\r\n      setClick(true);\r\n      flipper(firstSquare.index);\r\n      flipper(secondSquare.index);\r\n      setFirstSquare(\"firstSquare\");\r\n      setSecondSquare(\"secondSquare\");\r\n    }\r\n  };\r\n\r\n  let foundColor = (id) => {\r\n    let interimArr = infoForSquares;\r\n    interimArr.map((square) =>\r\n      square.id === id ? (square.found = !square.found) : null\r\n    );\r\n    setInfoForSquares(interimArr);\r\n  };\r\n\r\n  let refresh = () => {\r\n    setInfoForSquares(infoSquares());\r\n    setSteps(0);\r\n  }\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"memory-game\">\r\n        {infoForSquares.map((square) => (\r\n          <Square\r\n            click={click}\r\n            change={changeSquare}\r\n            key={square.index}\r\n            color={square.color}\r\n            flipped={square.flipped}\r\n            index={square.index}\r\n            id={square.id}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Info refresh={refresh} colors = {infoForSquares} steps={steps} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport './App.css';\nimport Board from './playBoard/board/Board.js';\n\nconst App = () => {\n  return <Board />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}